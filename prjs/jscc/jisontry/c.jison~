
/* description: Parses end executes mathematical expressions. */

/* lexical grammar */

%lex

 /* Basic stuff */
D               [0-9]
L               [a-zA-Z_]
H               [a-fA-F0-9]
WHITESPACE      [\s\f\t\v\r]
INT             "int"
VOID            "void"
 /* 10.1 Integers, Identifiers, and Special Notation */

%x STRING
%%
{INT}             return 'INT';
{VOID}            return 'VOID';
{L}({L}|{D})*     return 'IDENTIFIER'
{D}+              return 'CONSTANT'

"{"               return '{'
"}"               return '}'
"("               return '('
")"               return ')' 
";"               return ';'
","               return ',';

\"                {
                     console.log("Matched first quote");
                     this.begin("STRING");
                     yy.buff="";
                  }
<STRING>\"       {
                     this.begin("INITIAL");
                     yytext=yy.buff;
                     return 'STRING_LITERAL';
                 }
<STRING>.        {
                         yy.buff+=yytext;
                 }
<STRING>\\.        {
                         yy.buff+=yytext;
                 }
{WHITESPACE}+    {}
.                { return 'INVALID';}
/lex

/* operator associations and precedence */

%left '{'

%start Program

%% /* language grammar */

Program 
       : translation_unit
          { 
            $$=$1; 
            function dump(obj){
                 var str="";
                 if(typeof(obj)=="undefined") return str;
                 if(obj===null){ str+="null"; return str;}
                 if(typeof (obj)=="string"  ){
                     str+=obj; return str;
                 }
                 if(typeof(obj.length)!="undefined"){
                      str+="[";
                     for(var i=0;i<obj.length;i++){
                             if(i>0) str+=",";
                             str+=dump(obj[i]);
                     }
                       str+="]";
                     return str;
                 }
                str+="{";
                 var p="";
                 for(var x in obj){
                     str+=p;
                     str+=x+":"+dump(obj[x]);   
                      p=",\n";
                 }
                 str+="}\n";
                 return str;
            }

            function genbody(obj){
                out=[];
                 out.push(69,29); //push ra
                    
                 out.pop(70,29);
                return out;
            }
  
            function gencode(obj){
                   var out=[]
                   if(obj.type&&obj.type=="func_def"){
                       out.push("{gdef:'"+obj.dec.id+"'}");
                       out = out.concat(genbody(obj.body));
                   }
                   return out;
            }
//            console.log(gencode($1[1]).join(","));
  //          console.log(dump($1));

              console.log($1);

              yy.ast = $1;
          }
            
          

       ;
primary_expression
	: IDENTIFIER
          { $$ = new yy.ds.Identifier().init($1);}
	| CONSTANT
          { $$ = new yy.ds.Constant().init($1); }
	| STRING_LITERAL
          { $$ = new yy.ds.StringLiteral().init($1); }
	| '(' expression ')'
          { $$ = $2; }
	;

postfix_expression
	: primary_expression
          { $$=$1;}
	| postfix_expression '[' expression ']'
	| postfix_expression '(' ')'
	| postfix_expression '(' argument_expression_list ')'
          { $$ = new yy.ds.Dispatch().init($1,$3);  }
	| postfix_expression '.' IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
	;

argument_expression_list
	: assignment_expression
              { $$=[$1]; }
	| argument_expression_list ',' assignment_expression
              { $1.push($3); $$=$1; }
	;

unary_expression
	: postfix_expression
          { $$ = $1; }
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF '(' type_name ')'
	;

unary_operator
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	;

cast_expression
	: unary_expression
	| '(' type_name ')' cast_expression
	;

multiplicative_expression
	: cast_expression
	| multiplicative_expression '*' cast_expression
	| multiplicative_expression '/' cast_expression
	| multiplicative_expression '%' cast_expression
	;

additive_expression
	: multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression
	;

shift_expression
	: additive_expression
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression
	;

relational_expression
	: shift_expression
	| relational_expression '<' shift_expression
	| relational_expression '>' shift_expression
	| relational_expression LE_OP shift_expression
	| relational_expression GE_OP shift_expression
	;

equality_expression
	: relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression
	;

and_expression
	: equality_expression
	| and_expression '&' equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression '^' and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression '|' exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression OR_OP logical_and_expression
	;

conditional_expression
	: logical_or_expression
	| logical_or_expression '?' expression ':' conditional_expression
	;

assignment_expression
	: conditional_expression
	| unary_expression assignment_operator assignment_expression
	;

assignment_operator
	: '='
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

expression
	: assignment_expression
	| expression ',' assignment_expression
	;

constant_expression
	: conditional_expression
	;

declaration
	: declaration_specifiers ';'
	| declaration_specifiers init_declarator_list ';'
	;

declaration_specifiers
	: storage_class_specifier
	| storage_class_specifier declaration_specifiers
	| type_specifier
            { $$ = new yy.ds.DeclarationSpecifiers().init($1); }
	| type_specifier declaration_specifiers
	| type_qualifier
	| type_qualifier declaration_specifiers
	;

init_declarator_list
	: init_declarator
	| init_declarator_list ',' init_declarator
	;

init_declarator
	: declarator
	| declarator '=' initializer
	;

storage_class_specifier
	: TYPEDEF
	| EXTERN
	| STATIC
	| AUTO
	| REGISTER
	;

type_specifier
	: VOID
          { $$ = $1; }
	| CHAR
          { $$ = $1; }
	| SHORT
          { $$ = $1; }
	| INT
          { $$ = $1; }
	| LONG
          { $$ = $1; }
	| FLOAT
          { $$ = $1; }
	| DOUBLE
          { $$ = $1; }
	| SIGNED
          { $$ = $1; }
	| UNSIGNED
          { $$ = $1; }
	| struct_or_union_specifier
          { $$ = $1; }
	| enum_specifier
          { $$ = $1; }
	| TYPE_NAME
          { $$ = $1; }
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
	| struct_or_union '{' struct_declaration_list '}'
	| struct_or_union IDENTIFIER
	;

struct_or_union
	: STRUCT
	| UNION
	;

struct_declaration_list
	: struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
            { $2.push($1); $$=$2; }
	| type_specifier
            { $$=[$1]; }
	| type_qualifier specifier_qualifier_list
             { $2.push($1); $$=$2; }
	| type_qualifier
          { $$=[$1]; }
	;

struct_declarator_list
	: struct_declarator
	| struct_declarator_list ',' struct_declarator
	;

struct_declarator
	: declarator
	| ':' constant_expression
	| declarator ':' constant_expression
	;

enum_specifier
	: ENUM '{' enumerator_list '}'
	| ENUM IDENTIFIER '{' enumerator_list '}'
	| ENUM IDENTIFIER
	;

enumerator_list
	: enumerator
	| enumerator_list ',' enumerator
	;

enumerator
	: IDENTIFIER
	| IDENTIFIER '=' constant_expression
	;

type_qualifier
	: CONST
	| VOLATILE
	;

declarator
	: pointer direct_declarator
	| direct_declarator
         { $$=new yy.ds.Declarator().init($1); }
	;

direct_declarator
	: IDENTIFIER
          { $$=$1; } 
	| '(' declarator ')'
           { $$= $2; }
	| direct_declarator '[' constant_expression ']'
	| direct_declarator '[' ']'
	| direct_declarator '(' parameter_type_list ')'
           { $$ = new yy.ds.DirectDeclarator().init($1,$3); }
	| direct_declarator '(' identifier_list ')'
           { $$ = new yy.ds.FunctionDeclarator().init($1,$3); }
	| direct_declarator '(' ')'
           { $$ = new yy.ds.FunctionDeclarator().init($1,null); }
	;

pointer
	: '*'
	| '*' type_qualifier_list
	| '*' pointer
	| '*' type_qualifier_list pointer
	;

type_qualifier_list
	: type_qualifier
            { $$=[$1];}
	| type_qualifier_list type_qualifier
           { $1.push($2); $$=$1; }
	;


parameter_type_list
	: parameter_list
          { $$ = $1; }
	| parameter_list ',' ELLIPSIS
	;

parameter_list
	: parameter_declaration
           { $$=[$1];}
	| parameter_list ',' parameter_declaration
           { $1.push($3); $$=$1; }
	;

parameter_declaration
	: declaration_specifiers declarator
             {$$ = [$1,$2]; }
	| declaration_specifiers abstract_declarator
             { $$ = [$1,$2];}
	| declaration_specifiers
             { $$ = [$1]; }
	;

identifier_list
	: IDENTIFIER
              { $$ =[$1]; }
	| identifier_list ',' IDENTIFIER
             { $1.push($3); $$=$1; }
	;

type_name
	: specifier_qualifier_list
             {$$=[$1];}
	| specifier_qualifier_list abstract_declarator
            { $$=[$1,$2]; }
	;

abstract_declarator
	: pointer
	| direct_abstract_declarator
               { $$=$1; }
	| pointer direct_abstract_declarator
	;

direct_abstract_declarator
	: '(' abstract_declarator ')'
           { $$ = $2; }
	| '[' ']'
	| '[' constant_expression ']'
	| direct_abstract_declarator '[' ']'
	| direct_abstract_declarator '[' constant_expression ']'
	| '(' ')'
	| '(' parameter_type_list ')'
              { $$ = $2; }
	| direct_abstract_declarator '(' ')'
	| direct_abstract_declarator '(' parameter_type_list ')'
            { $1.params=$3; $$=$1; }
	;

initializer
	: assignment_expression
	| '{' initializer_list '}'
	| '{' initializer_list ',' '}'
	;

initializer_list
	: initializer
	| initializer_list ',' initializer
	;

statement
	: labeled_statement
	| compound_statement
             { $$ = $1;}
	| expression_statement
             { $$ = $1;}
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: IDENTIFIER ':' statement
	| CASE constant_expression ':' statement
	| DEFAULT ':' statement
	;

compound_statement
	: '{' '}'
           { $$ = new yy.ds.CompoundStatement().init(new yy.ds.DeclarationList().init(),new yy.ds.StatementList().init()); }
	| '{' statement_list '}'
          { $$ = new yy.ds.CompoundStatement().init(new yy.ds.DeclarationList().init(),$2); }
	| '{' declaration_list '}'
           { $$ = new yy.ds.CompoundStatement().init($2,new yy.ds.StatementList().init()); }
	| '{' declaration_list statement_list '}'
           { $$ = new yy.ds.CompoundStatement().init($2,$3); }
	;

declaration_list
	: declaration
            { $$=[$1]; }
	| declaration_list declaration
            { $$ = $1; $$.push($2); }
	;

statement_list
	: statement
          { $$ = new yy.ds.StatementList().init($1); }
	| statement_list statement
           {$$=$1.append($2);  }
	;

expression_statement
	: ';'
          { $$="null"; }
	| expression ';'
          { $$  = $1;  }
	;


iteration_statement
	: WHILE '(' expression ')' statement
	| DO statement WHILE '(' expression ')' ';'
	| FOR '(' expression_statement expression_statement ')' statement
	| FOR '(' expression_statement expression_statement expression ')' statement
	;

jump_statement
	: GOTO IDENTIFIER ';'
	| CONTINUE ';'
	| BREAK ';'
	| RETURN ';'
	| RETURN expression ';'
	;

translation_unit
	: external_declaration
          { $$= new yy.ds.TranslationUnit().init($1) ; }
	| translation_unit external_declaration
          { $1.append($2); $$=$1; }
	;

external_declaration
	: function_definition
          { $$= new yy.ds.ExternalDeclaration().init($1); }
	| declaration
          { $$ = $1; }
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
             { $$={type:'func_def',dec_spec:$1,dec:$2,dec_list:$3,body:$4}; }
	| declaration_specifiers declarator compound_statement
             { $$=new yy.ds.FunctionDefinition().init($1,$2,null,$3);  //{type:'func_def',dec_spec:$1,dec:$2,body:$3}; }
	| declarator declaration_list compound_statement
            
	| declarator compound_statement
           
	;
